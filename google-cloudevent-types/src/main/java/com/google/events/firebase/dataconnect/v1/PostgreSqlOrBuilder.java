/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/dataconnect/v1/data.proto

package com.google.events.firebase.dataconnect.v1;

public interface PostgreSqlOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.events.firebase.dataconnect.v1.PostgreSql)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Optional. Configure how much Postgresql schema validation to perform.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;</code>
   *
   * @return Whether the schemaValidation field is set.
   */
  boolean hasSchemaValidation();

  /**
   *
   *
   * <pre>
   * Optional. Configure how much Postgresql schema validation to perform.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;</code>
   *
   * @return The enum numeric value on the wire for schemaValidation.
   */
  int getSchemaValidationValue();

  /**
   *
   *
   * <pre>
   * Optional. Configure how much Postgresql schema validation to perform.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;</code>
   *
   * @return The schemaValidation.
   */
  com.google.events.firebase.dataconnect.v1.SqlSchemaValidation getSchemaValidation();

  /**
   *
   *
   * <pre>
   * Optional. Configure how to perform Postgresql schema migration.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
   *
   * @return Whether the schemaMigration field is set.
   */
  boolean hasSchemaMigration();

  /**
   *
   *
   * <pre>
   * Optional. Configure how to perform Postgresql schema migration.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
   *
   * @return The enum numeric value on the wire for schemaMigration.
   */
  int getSchemaMigrationValue();

  /**
   *
   *
   * <pre>
   * Optional. Configure how to perform Postgresql schema migration.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
   *
   * @return The schemaMigration.
   */
  com.google.events.firebase.dataconnect.v1.SqlSchemaMigration getSchemaMigration();

  /**
   *
   *
   * <pre>
   * No Postgres data source is linked.
   * If set, don't allow `database` and `schema_validation` to be configured.
   * </pre>
   *
   * <code>bool unlinked = 4;</code>
   *
   * @return Whether the unlinked field is set.
   */
  boolean hasUnlinked();

  /**
   *
   *
   * <pre>
   * No Postgres data source is linked.
   * If set, don't allow `database` and `schema_validation` to be configured.
   * </pre>
   *
   * <code>bool unlinked = 4;</code>
   *
   * @return The unlinked.
   */
  boolean getUnlinked();

  /**
   *
   *
   * <pre>
   * Cloud SQL configurations.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
   *
   * @return Whether the cloudSql field is set.
   */
  boolean hasCloudSql();

  /**
   *
   *
   * <pre>
   * Cloud SQL configurations.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
   *
   * @return The cloudSql.
   */
  com.google.events.firebase.dataconnect.v1.CloudSqlInstance getCloudSql();

  /**
   *
   *
   * <pre>
   * Cloud SQL configurations.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
   */
  com.google.events.firebase.dataconnect.v1.CloudSqlInstanceOrBuilder getCloudSqlOrBuilder();

  /**
   *
   *
   * <pre>
   * Required. Name of the PostgreSQL database.
   * </pre>
   *
   * <code>string database = 1;</code>
   *
   * @return The database.
   */
  java.lang.String getDatabase();

  /**
   *
   *
   * <pre>
   * Required. Name of the PostgreSQL database.
   * </pre>
   *
   * <code>string database = 1;</code>
   *
   * @return The bytes for database.
   */
  com.google.protobuf.ByteString getDatabaseBytes();

  public com.google.events.firebase.dataconnect.v1.PostgreSql.BeforeDeployCase
      getBeforeDeployCase();

  public com.google.events.firebase.dataconnect.v1.PostgreSql.ConfigurationCase
      getConfigurationCase();
}
