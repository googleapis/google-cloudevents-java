/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/dataconnect/v1/data.proto

package com.google.events.firebase.dataconnect.v1;

/**
 *
 *
 * <pre>
 * GraphqlError contains the error information of a GraphQL query or mutation.
 * </pre>
 *
 * Protobuf type {@code google.events.firebase.dataconnect.v1.GraphqlError}
 */
public final class GraphqlError extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.events.firebase.dataconnect.v1.GraphqlError)
    GraphqlErrorOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use GraphqlError.newBuilder() to construct.
  private GraphqlError(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private GraphqlError() {
    message_ = "";
    locations_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new GraphqlError();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.events.firebase.dataconnect.v1.Data
        .internal_static_google_events_firebase_dataconnect_v1_GraphqlError_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.events.firebase.dataconnect.v1.Data
        .internal_static_google_events_firebase_dataconnect_v1_GraphqlError_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.events.firebase.dataconnect.v1.GraphqlError.class,
            com.google.events.firebase.dataconnect.v1.GraphqlError.Builder.class);
  }

  public static final int MESSAGE_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object message_ = "";

  /**
   *
   *
   * <pre>
   * The detailed error message.
   * The message should help developer understand the underlying problem without
   * leaking internal data.
   * </pre>
   *
   * <code>string message = 1;</code>
   *
   * @return The message.
   */
  @java.lang.Override
  public java.lang.String getMessage() {
    java.lang.Object ref = message_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      message_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * The detailed error message.
   * The message should help developer understand the underlying problem without
   * leaking internal data.
   * </pre>
   *
   * <code>string message = 1;</code>
   *
   * @return The bytes for message.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getMessageBytes() {
    java.lang.Object ref = message_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      message_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LOCATIONS_FIELD_NUMBER = 2;

  @SuppressWarnings("serial")
  private java.util.List<com.google.events.firebase.dataconnect.v1.SourceLocation> locations_;

  /**
   *
   *
   * <pre>
   * The source locations where the error occurred.
   * Locations should help developers and toolings identify the source of error
   * quickly.
   * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
   * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document.
   * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
   * have access access the underlying GQL source.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.events.firebase.dataconnect.v1.SourceLocation>
      getLocationsList() {
    return locations_;
  }

  /**
   *
   *
   * <pre>
   * The source locations where the error occurred.
   * Locations should help developers and toolings identify the source of error
   * quickly.
   * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
   * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document.
   * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
   * have access access the underlying GQL source.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder>
      getLocationsOrBuilderList() {
    return locations_;
  }

  /**
   *
   *
   * <pre>
   * The source locations where the error occurred.
   * Locations should help developers and toolings identify the source of error
   * quickly.
   * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
   * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document.
   * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
   * have access access the underlying GQL source.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
   */
  @java.lang.Override
  public int getLocationsCount() {
    return locations_.size();
  }

  /**
   *
   *
   * <pre>
   * The source locations where the error occurred.
   * Locations should help developers and toolings identify the source of error
   * quickly.
   * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
   * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document.
   * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
   * have access access the underlying GQL source.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
   */
  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.SourceLocation getLocations(int index) {
    return locations_.get(index);
  }

  /**
   *
   *
   * <pre>
   * The source locations where the error occurred.
   * Locations should help developers and toolings identify the source of error
   * quickly.
   * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
   * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
   * GQL document.
   * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
   * have access access the underlying GQL source.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
   */
  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder getLocationsOrBuilder(
      int index) {
    return locations_.get(index);
  }

  public static final int PATH_FIELD_NUMBER = 3;
  private com.google.protobuf.ListValue path_;

  /**
   *
   *
   * <pre>
   * The result field which could not be populated due to error.
   * Clients can use path to identify whether a null result is intentional or
   * caused by a runtime error.
   * It should be a list of string or index from the root of GraphQL query
   * document.
   * </pre>
   *
   * <code>.google.protobuf.ListValue path = 3;</code>
   *
   * @return Whether the path field is set.
   */
  @java.lang.Override
  public boolean hasPath() {
    return path_ != null;
  }

  /**
   *
   *
   * <pre>
   * The result field which could not be populated due to error.
   * Clients can use path to identify whether a null result is intentional or
   * caused by a runtime error.
   * It should be a list of string or index from the root of GraphQL query
   * document.
   * </pre>
   *
   * <code>.google.protobuf.ListValue path = 3;</code>
   *
   * @return The path.
   */
  @java.lang.Override
  public com.google.protobuf.ListValue getPath() {
    return path_ == null ? com.google.protobuf.ListValue.getDefaultInstance() : path_;
  }

  /**
   *
   *
   * <pre>
   * The result field which could not be populated due to error.
   * Clients can use path to identify whether a null result is intentional or
   * caused by a runtime error.
   * It should be a list of string or index from the root of GraphQL query
   * document.
   * </pre>
   *
   * <code>.google.protobuf.ListValue path = 3;</code>
   */
  @java.lang.Override
  public com.google.protobuf.ListValueOrBuilder getPathOrBuilder() {
    return path_ == null ? com.google.protobuf.ListValue.getDefaultInstance() : path_;
  }

  public static final int EXTENSIONS_FIELD_NUMBER = 4;
  private com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions_;

  /**
   *
   *
   * <pre>
   * Additional error information.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
   *
   * @return Whether the extensions field is set.
   */
  @java.lang.Override
  public boolean hasExtensions() {
    return extensions_ != null;
  }

  /**
   *
   *
   * <pre>
   * Additional error information.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
   *
   * @return The extensions.
   */
  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions getExtensions() {
    return extensions_ == null
        ? com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.getDefaultInstance()
        : extensions_;
  }

  /**
   *
   *
   * <pre>
   * Additional error information.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
   */
  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensionsOrBuilder
      getExtensionsOrBuilder() {
    return extensions_ == null
        ? com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.getDefaultInstance()
        : extensions_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(message_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, message_);
    }
    for (int i = 0; i < locations_.size(); i++) {
      output.writeMessage(2, locations_.get(i));
    }
    if (path_ != null) {
      output.writeMessage(3, getPath());
    }
    if (extensions_ != null) {
      output.writeMessage(4, getExtensions());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(message_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, message_);
    }
    for (int i = 0; i < locations_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, locations_.get(i));
    }
    if (path_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getPath());
    }
    if (extensions_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getExtensions());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.events.firebase.dataconnect.v1.GraphqlError)) {
      return super.equals(obj);
    }
    com.google.events.firebase.dataconnect.v1.GraphqlError other =
        (com.google.events.firebase.dataconnect.v1.GraphqlError) obj;

    if (!getMessage().equals(other.getMessage())) return false;
    if (!getLocationsList().equals(other.getLocationsList())) return false;
    if (hasPath() != other.hasPath()) return false;
    if (hasPath()) {
      if (!getPath().equals(other.getPath())) return false;
    }
    if (hasExtensions() != other.hasExtensions()) return false;
    if (hasExtensions()) {
      if (!getExtensions().equals(other.getExtensions())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
    hash = (53 * hash) + getMessage().hashCode();
    if (getLocationsCount() > 0) {
      hash = (37 * hash) + LOCATIONS_FIELD_NUMBER;
      hash = (53 * hash) + getLocationsList().hashCode();
    }
    if (hasPath()) {
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
    }
    if (hasExtensions()) {
      hash = (37 * hash) + EXTENSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getExtensions().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.events.firebase.dataconnect.v1.GraphqlError prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * GraphqlError contains the error information of a GraphQL query or mutation.
   * </pre>
   *
   * Protobuf type {@code google.events.firebase.dataconnect.v1.GraphqlError}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.events.firebase.dataconnect.v1.GraphqlError)
      com.google.events.firebase.dataconnect.v1.GraphqlErrorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.events.firebase.dataconnect.v1.Data
          .internal_static_google_events_firebase_dataconnect_v1_GraphqlError_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.events.firebase.dataconnect.v1.Data
          .internal_static_google_events_firebase_dataconnect_v1_GraphqlError_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.events.firebase.dataconnect.v1.GraphqlError.class,
              com.google.events.firebase.dataconnect.v1.GraphqlError.Builder.class);
    }

    // Construct using com.google.events.firebase.dataconnect.v1.GraphqlError.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      message_ = "";
      if (locationsBuilder_ == null) {
        locations_ = java.util.Collections.emptyList();
      } else {
        locations_ = null;
        locationsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      path_ = null;
      if (pathBuilder_ != null) {
        pathBuilder_.dispose();
        pathBuilder_ = null;
      }
      extensions_ = null;
      if (extensionsBuilder_ != null) {
        extensionsBuilder_.dispose();
        extensionsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.events.firebase.dataconnect.v1.Data
          .internal_static_google_events_firebase_dataconnect_v1_GraphqlError_descriptor;
    }

    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.GraphqlError getDefaultInstanceForType() {
      return com.google.events.firebase.dataconnect.v1.GraphqlError.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.GraphqlError build() {
      com.google.events.firebase.dataconnect.v1.GraphqlError result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.GraphqlError buildPartial() {
      com.google.events.firebase.dataconnect.v1.GraphqlError result =
          new com.google.events.firebase.dataconnect.v1.GraphqlError(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(
        com.google.events.firebase.dataconnect.v1.GraphqlError result) {
      if (locationsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          locations_ = java.util.Collections.unmodifiableList(locations_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.locations_ = locations_;
      } else {
        result.locations_ = locationsBuilder_.build();
      }
    }

    private void buildPartial0(com.google.events.firebase.dataconnect.v1.GraphqlError result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.message_ = message_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.path_ = pathBuilder_ == null ? path_ : pathBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.extensions_ = extensionsBuilder_ == null ? extensions_ : extensionsBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.events.firebase.dataconnect.v1.GraphqlError) {
        return mergeFrom((com.google.events.firebase.dataconnect.v1.GraphqlError) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.events.firebase.dataconnect.v1.GraphqlError other) {
      if (other == com.google.events.firebase.dataconnect.v1.GraphqlError.getDefaultInstance())
        return this;
      if (!other.getMessage().isEmpty()) {
        message_ = other.message_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (locationsBuilder_ == null) {
        if (!other.locations_.isEmpty()) {
          if (locations_.isEmpty()) {
            locations_ = other.locations_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLocationsIsMutable();
            locations_.addAll(other.locations_);
          }
          onChanged();
        }
      } else {
        if (!other.locations_.isEmpty()) {
          if (locationsBuilder_.isEmpty()) {
            locationsBuilder_.dispose();
            locationsBuilder_ = null;
            locations_ = other.locations_;
            bitField0_ = (bitField0_ & ~0x00000002);
            locationsBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders
                    ? getLocationsFieldBuilder()
                    : null;
          } else {
            locationsBuilder_.addAllMessages(other.locations_);
          }
        }
      }
      if (other.hasPath()) {
        mergePath(other.getPath());
      }
      if (other.hasExtensions()) {
        mergeExtensions(other.getExtensions());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                message_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
            case 18:
              {
                com.google.events.firebase.dataconnect.v1.SourceLocation m =
                    input.readMessage(
                        com.google.events.firebase.dataconnect.v1.SourceLocation.parser(),
                        extensionRegistry);
                if (locationsBuilder_ == null) {
                  ensureLocationsIsMutable();
                  locations_.add(m);
                } else {
                  locationsBuilder_.addMessage(m);
                }
                break;
              } // case 18
            case 26:
              {
                input.readMessage(getPathFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
            case 34:
              {
                input.readMessage(getExtensionsFieldBuilder().getBuilder(), extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int bitField0_;

    private java.lang.Object message_ = "";

    /**
     *
     *
     * <pre>
     * The detailed error message.
     * The message should help developer understand the underlying problem without
     * leaking internal data.
     * </pre>
     *
     * <code>string message = 1;</code>
     *
     * @return The message.
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        message_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * The detailed error message.
     * The message should help developer understand the underlying problem without
     * leaking internal data.
     * </pre>
     *
     * <code>string message = 1;</code>
     *
     * @return The bytes for message.
     */
    public com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * The detailed error message.
     * The message should help developer understand the underlying problem without
     * leaking internal data.
     * </pre>
     *
     * <code>string message = 1;</code>
     *
     * @param value The message to set.
     * @return This builder for chaining.
     */
    public Builder setMessage(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      message_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The detailed error message.
     * The message should help developer understand the underlying problem without
     * leaking internal data.
     * </pre>
     *
     * <code>string message = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearMessage() {
      message_ = getDefaultInstance().getMessage();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The detailed error message.
     * The message should help developer understand the underlying problem without
     * leaking internal data.
     * </pre>
     *
     * <code>string message = 1;</code>
     *
     * @param value The bytes for message to set.
     * @return This builder for chaining.
     */
    public Builder setMessageBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      message_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.google.events.firebase.dataconnect.v1.SourceLocation> locations_ =
        java.util.Collections.emptyList();

    private void ensureLocationsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        locations_ =
            new java.util.ArrayList<com.google.events.firebase.dataconnect.v1.SourceLocation>(
                locations_);
        bitField0_ |= 0x00000002;
      }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.events.firebase.dataconnect.v1.SourceLocation,
            com.google.events.firebase.dataconnect.v1.SourceLocation.Builder,
            com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder>
        locationsBuilder_;

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public java.util.List<com.google.events.firebase.dataconnect.v1.SourceLocation>
        getLocationsList() {
      if (locationsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(locations_);
      } else {
        return locationsBuilder_.getMessageList();
      }
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public int getLocationsCount() {
      if (locationsBuilder_ == null) {
        return locations_.size();
      } else {
        return locationsBuilder_.getCount();
      }
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public com.google.events.firebase.dataconnect.v1.SourceLocation getLocations(int index) {
      if (locationsBuilder_ == null) {
        return locations_.get(index);
      } else {
        return locationsBuilder_.getMessage(index);
      }
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder setLocations(
        int index, com.google.events.firebase.dataconnect.v1.SourceLocation value) {
      if (locationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocationsIsMutable();
        locations_.set(index, value);
        onChanged();
      } else {
        locationsBuilder_.setMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder setLocations(
        int index,
        com.google.events.firebase.dataconnect.v1.SourceLocation.Builder builderForValue) {
      if (locationsBuilder_ == null) {
        ensureLocationsIsMutable();
        locations_.set(index, builderForValue.build());
        onChanged();
      } else {
        locationsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder addLocations(com.google.events.firebase.dataconnect.v1.SourceLocation value) {
      if (locationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocationsIsMutable();
        locations_.add(value);
        onChanged();
      } else {
        locationsBuilder_.addMessage(value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder addLocations(
        int index, com.google.events.firebase.dataconnect.v1.SourceLocation value) {
      if (locationsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLocationsIsMutable();
        locations_.add(index, value);
        onChanged();
      } else {
        locationsBuilder_.addMessage(index, value);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder addLocations(
        com.google.events.firebase.dataconnect.v1.SourceLocation.Builder builderForValue) {
      if (locationsBuilder_ == null) {
        ensureLocationsIsMutable();
        locations_.add(builderForValue.build());
        onChanged();
      } else {
        locationsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder addLocations(
        int index,
        com.google.events.firebase.dataconnect.v1.SourceLocation.Builder builderForValue) {
      if (locationsBuilder_ == null) {
        ensureLocationsIsMutable();
        locations_.add(index, builderForValue.build());
        onChanged();
      } else {
        locationsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder addAllLocations(
        java.lang.Iterable<? extends com.google.events.firebase.dataconnect.v1.SourceLocation>
            values) {
      if (locationsBuilder_ == null) {
        ensureLocationsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(values, locations_);
        onChanged();
      } else {
        locationsBuilder_.addAllMessages(values);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder clearLocations() {
      if (locationsBuilder_ == null) {
        locations_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        locationsBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public Builder removeLocations(int index) {
      if (locationsBuilder_ == null) {
        ensureLocationsIsMutable();
        locations_.remove(index);
        onChanged();
      } else {
        locationsBuilder_.remove(index);
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public com.google.events.firebase.dataconnect.v1.SourceLocation.Builder getLocationsBuilder(
        int index) {
      return getLocationsFieldBuilder().getBuilder(index);
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder getLocationsOrBuilder(
        int index) {
      if (locationsBuilder_ == null) {
        return locations_.get(index);
      } else {
        return locationsBuilder_.getMessageOrBuilder(index);
      }
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public java.util.List<
            ? extends com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder>
        getLocationsOrBuilderList() {
      if (locationsBuilder_ != null) {
        return locationsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(locations_);
      }
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public com.google.events.firebase.dataconnect.v1.SourceLocation.Builder addLocationsBuilder() {
      return getLocationsFieldBuilder()
          .addBuilder(
              com.google.events.firebase.dataconnect.v1.SourceLocation.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public com.google.events.firebase.dataconnect.v1.SourceLocation.Builder addLocationsBuilder(
        int index) {
      return getLocationsFieldBuilder()
          .addBuilder(
              index, com.google.events.firebase.dataconnect.v1.SourceLocation.getDefaultInstance());
    }

    /**
     *
     *
     * <pre>
     * The source locations where the error occurred.
     * Locations should help developers and toolings identify the source of error
     * quickly.
     * Included in admin endpoints (`ExecuteGraphql`, `ExecuteGraphqlRead`,
     * `UpdateSchema` and `UpdateConnector`) to reference the provided GraphQL
     * GQL document.
     * Omitted in `ExecuteMutation` and `ExecuteQuery` since the caller shouldn't
     * have access access the underlying GQL source.
     * </pre>
     *
     * <code>repeated .google.events.firebase.dataconnect.v1.SourceLocation locations = 2;</code>
     */
    public java.util.List<com.google.events.firebase.dataconnect.v1.SourceLocation.Builder>
        getLocationsBuilderList() {
      return getLocationsFieldBuilder().getBuilderList();
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.events.firebase.dataconnect.v1.SourceLocation,
            com.google.events.firebase.dataconnect.v1.SourceLocation.Builder,
            com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder>
        getLocationsFieldBuilder() {
      if (locationsBuilder_ == null) {
        locationsBuilder_ =
            new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.events.firebase.dataconnect.v1.SourceLocation,
                com.google.events.firebase.dataconnect.v1.SourceLocation.Builder,
                com.google.events.firebase.dataconnect.v1.SourceLocationOrBuilder>(
                locations_, ((bitField0_ & 0x00000002) != 0), getParentForChildren(), isClean());
        locations_ = null;
      }
      return locationsBuilder_;
    }

    private com.google.protobuf.ListValue path_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.ListValue,
            com.google.protobuf.ListValue.Builder,
            com.google.protobuf.ListValueOrBuilder>
        pathBuilder_;

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     *
     * @return Whether the path field is set.
     */
    public boolean hasPath() {
      return ((bitField0_ & 0x00000004) != 0);
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     *
     * @return The path.
     */
    public com.google.protobuf.ListValue getPath() {
      if (pathBuilder_ == null) {
        return path_ == null ? com.google.protobuf.ListValue.getDefaultInstance() : path_;
      } else {
        return pathBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    public Builder setPath(com.google.protobuf.ListValue value) {
      if (pathBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        path_ = value;
      } else {
        pathBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    public Builder setPath(com.google.protobuf.ListValue.Builder builderForValue) {
      if (pathBuilder_ == null) {
        path_ = builderForValue.build();
      } else {
        pathBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    public Builder mergePath(com.google.protobuf.ListValue value) {
      if (pathBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)
            && path_ != null
            && path_ != com.google.protobuf.ListValue.getDefaultInstance()) {
          getPathBuilder().mergeFrom(value);
        } else {
          path_ = value;
        }
      } else {
        pathBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    public Builder clearPath() {
      bitField0_ = (bitField0_ & ~0x00000004);
      path_ = null;
      if (pathBuilder_ != null) {
        pathBuilder_.dispose();
        pathBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    public com.google.protobuf.ListValue.Builder getPathBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getPathFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    public com.google.protobuf.ListValueOrBuilder getPathOrBuilder() {
      if (pathBuilder_ != null) {
        return pathBuilder_.getMessageOrBuilder();
      } else {
        return path_ == null ? com.google.protobuf.ListValue.getDefaultInstance() : path_;
      }
    }

    /**
     *
     *
     * <pre>
     * The result field which could not be populated due to error.
     * Clients can use path to identify whether a null result is intentional or
     * caused by a runtime error.
     * It should be a list of string or index from the root of GraphQL query
     * document.
     * </pre>
     *
     * <code>.google.protobuf.ListValue path = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.ListValue,
            com.google.protobuf.ListValue.Builder,
            com.google.protobuf.ListValueOrBuilder>
        getPathFieldBuilder() {
      if (pathBuilder_ == null) {
        pathBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.ListValue,
                com.google.protobuf.ListValue.Builder,
                com.google.protobuf.ListValueOrBuilder>(
                getPath(), getParentForChildren(), isClean());
        path_ = null;
      }
      return pathBuilder_;
    }

    private com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions,
            com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.Builder,
            com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensionsOrBuilder>
        extensionsBuilder_;

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     *
     * @return Whether the extensions field is set.
     */
    public boolean hasExtensions() {
      return ((bitField0_ & 0x00000008) != 0);
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     *
     * @return The extensions.
     */
    public com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions getExtensions() {
      if (extensionsBuilder_ == null) {
        return extensions_ == null
            ? com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.getDefaultInstance()
            : extensions_;
      } else {
        return extensionsBuilder_.getMessage();
      }
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    public Builder setExtensions(
        com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions value) {
      if (extensionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        extensions_ = value;
      } else {
        extensionsBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    public Builder setExtensions(
        com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.Builder builderForValue) {
      if (extensionsBuilder_ == null) {
        extensions_ = builderForValue.build();
      } else {
        extensionsBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    public Builder mergeExtensions(
        com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions value) {
      if (extensionsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)
            && extensions_ != null
            && extensions_
                != com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions
                    .getDefaultInstance()) {
          getExtensionsBuilder().mergeFrom(value);
        } else {
          extensions_ = value;
        }
      } else {
        extensionsBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    public Builder clearExtensions() {
      bitField0_ = (bitField0_ & ~0x00000008);
      extensions_ = null;
      if (extensionsBuilder_ != null) {
        extensionsBuilder_.dispose();
        extensionsBuilder_ = null;
      }
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    public com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.Builder
        getExtensionsBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getExtensionsFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    public com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensionsOrBuilder
        getExtensionsOrBuilder() {
      if (extensionsBuilder_ != null) {
        return extensionsBuilder_.getMessageOrBuilder();
      } else {
        return extensions_ == null
            ? com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.getDefaultInstance()
            : extensions_;
      }
    }

    /**
     *
     *
     * <pre>
     * Additional error information.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions extensions = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions,
            com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.Builder,
            com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensionsOrBuilder>
        getExtensionsFieldBuilder() {
      if (extensionsBuilder_ == null) {
        extensionsBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions,
                com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensions.Builder,
                com.google.events.firebase.dataconnect.v1.GraphqlErrorExtensionsOrBuilder>(
                getExtensions(), getParentForChildren(), isClean());
        extensions_ = null;
      }
      return extensionsBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.events.firebase.dataconnect.v1.GraphqlError)
  }

  // @@protoc_insertion_point(class_scope:google.events.firebase.dataconnect.v1.GraphqlError)
  private static final com.google.events.firebase.dataconnect.v1.GraphqlError DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.events.firebase.dataconnect.v1.GraphqlError();
  }

  public static com.google.events.firebase.dataconnect.v1.GraphqlError getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GraphqlError> PARSER =
      new com.google.protobuf.AbstractParser<GraphqlError>() {
        @java.lang.Override
        public GraphqlError parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<GraphqlError> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GraphqlError> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.GraphqlError getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
