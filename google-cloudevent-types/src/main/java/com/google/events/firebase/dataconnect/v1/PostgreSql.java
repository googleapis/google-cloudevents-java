/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/dataconnect/v1/data.proto

package com.google.events.firebase.dataconnect.v1;

/**
 *
 *
 * <pre>
 * Settings for PostgreSQL data source.
 * </pre>
 *
 * Protobuf type {@code google.events.firebase.dataconnect.v1.PostgreSql}
 */
public final class PostgreSql extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.events.firebase.dataconnect.v1.PostgreSql)
    PostgreSqlOrBuilder {
  private static final long serialVersionUID = 0L;

  // Use PostgreSql.newBuilder() to construct.
  private PostgreSql(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private PostgreSql() {
    database_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new PostgreSql();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.events.firebase.dataconnect.v1.Data
        .internal_static_google_events_firebase_dataconnect_v1_PostgreSql_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.events.firebase.dataconnect.v1.Data
        .internal_static_google_events_firebase_dataconnect_v1_PostgreSql_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.events.firebase.dataconnect.v1.PostgreSql.class,
            com.google.events.firebase.dataconnect.v1.PostgreSql.Builder.class);
  }

  private int beforeDeployCase_ = 0;
  private java.lang.Object beforeDeploy_;

  public enum BeforeDeployCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SCHEMA_VALIDATION(3),
    SCHEMA_MIGRATION(5),
    BEFOREDEPLOY_NOT_SET(0);
    private final int value;

    private BeforeDeployCase(int value) {
      this.value = value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BeforeDeployCase valueOf(int value) {
      return forNumber(value);
    }

    public static BeforeDeployCase forNumber(int value) {
      switch (value) {
        case 3:
          return SCHEMA_VALIDATION;
        case 5:
          return SCHEMA_MIGRATION;
        case 0:
          return BEFOREDEPLOY_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public BeforeDeployCase getBeforeDeployCase() {
    return BeforeDeployCase.forNumber(beforeDeployCase_);
  }

  private int configurationCase_ = 0;
  private java.lang.Object configuration_;

  public enum ConfigurationCase
      implements
          com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    UNLINKED(4),
    CLOUD_SQL(2),
    CONFIGURATION_NOT_SET(0);
    private final int value;

    private ConfigurationCase(int value) {
      this.value = value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConfigurationCase valueOf(int value) {
      return forNumber(value);
    }

    public static ConfigurationCase forNumber(int value) {
      switch (value) {
        case 4:
          return UNLINKED;
        case 2:
          return CLOUD_SQL;
        case 0:
          return CONFIGURATION_NOT_SET;
        default:
          return null;
      }
    }

    public int getNumber() {
      return this.value;
    }
  };

  public ConfigurationCase getConfigurationCase() {
    return ConfigurationCase.forNumber(configurationCase_);
  }

  public static final int SCHEMA_VALIDATION_FIELD_NUMBER = 3;

  /**
   *
   *
   * <pre>
   * Optional. Configure how much Postgresql schema validation to perform.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;</code>
   *
   * @return Whether the schemaValidation field is set.
   */
  public boolean hasSchemaValidation() {
    return beforeDeployCase_ == 3;
  }

  /**
   *
   *
   * <pre>
   * Optional. Configure how much Postgresql schema validation to perform.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;</code>
   *
   * @return The enum numeric value on the wire for schemaValidation.
   */
  public int getSchemaValidationValue() {
    if (beforeDeployCase_ == 3) {
      return (java.lang.Integer) beforeDeploy_;
    }
    return 0;
  }

  /**
   *
   *
   * <pre>
   * Optional. Configure how much Postgresql schema validation to perform.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;</code>
   *
   * @return The schemaValidation.
   */
  public com.google.events.firebase.dataconnect.v1.SqlSchemaValidation getSchemaValidation() {
    if (beforeDeployCase_ == 3) {
      com.google.events.firebase.dataconnect.v1.SqlSchemaValidation result =
          com.google.events.firebase.dataconnect.v1.SqlSchemaValidation.forNumber(
              (java.lang.Integer) beforeDeploy_);
      return result == null
          ? com.google.events.firebase.dataconnect.v1.SqlSchemaValidation.UNRECOGNIZED
          : result;
    }
    return com.google.events.firebase.dataconnect.v1.SqlSchemaValidation
        .SQL_SCHEMA_VALIDATION_UNSPECIFIED;
  }

  public static final int SCHEMA_MIGRATION_FIELD_NUMBER = 5;

  /**
   *
   *
   * <pre>
   * Optional. Configure how to perform Postgresql schema migration.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
   *
   * @return Whether the schemaMigration field is set.
   */
  public boolean hasSchemaMigration() {
    return beforeDeployCase_ == 5;
  }

  /**
   *
   *
   * <pre>
   * Optional. Configure how to perform Postgresql schema migration.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
   *
   * @return The enum numeric value on the wire for schemaMigration.
   */
  public int getSchemaMigrationValue() {
    if (beforeDeployCase_ == 5) {
      return (java.lang.Integer) beforeDeploy_;
    }
    return 0;
  }

  /**
   *
   *
   * <pre>
   * Optional. Configure how to perform Postgresql schema migration.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
   *
   * @return The schemaMigration.
   */
  public com.google.events.firebase.dataconnect.v1.SqlSchemaMigration getSchemaMigration() {
    if (beforeDeployCase_ == 5) {
      com.google.events.firebase.dataconnect.v1.SqlSchemaMigration result =
          com.google.events.firebase.dataconnect.v1.SqlSchemaMigration.forNumber(
              (java.lang.Integer) beforeDeploy_);
      return result == null
          ? com.google.events.firebase.dataconnect.v1.SqlSchemaMigration.UNRECOGNIZED
          : result;
    }
    return com.google.events.firebase.dataconnect.v1.SqlSchemaMigration
        .SQL_SCHEMA_MIGRATION_UNSPECIFIED;
  }

  public static final int UNLINKED_FIELD_NUMBER = 4;

  /**
   *
   *
   * <pre>
   * No Postgres data source is linked.
   * If set, don't allow `database` and `schema_validation` to be configured.
   * </pre>
   *
   * <code>bool unlinked = 4;</code>
   *
   * @return Whether the unlinked field is set.
   */
  @java.lang.Override
  public boolean hasUnlinked() {
    return configurationCase_ == 4;
  }

  /**
   *
   *
   * <pre>
   * No Postgres data source is linked.
   * If set, don't allow `database` and `schema_validation` to be configured.
   * </pre>
   *
   * <code>bool unlinked = 4;</code>
   *
   * @return The unlinked.
   */
  @java.lang.Override
  public boolean getUnlinked() {
    if (configurationCase_ == 4) {
      return (java.lang.Boolean) configuration_;
    }
    return false;
  }

  public static final int CLOUD_SQL_FIELD_NUMBER = 2;

  /**
   *
   *
   * <pre>
   * Cloud SQL configurations.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
   *
   * @return Whether the cloudSql field is set.
   */
  @java.lang.Override
  public boolean hasCloudSql() {
    return configurationCase_ == 2;
  }

  /**
   *
   *
   * <pre>
   * Cloud SQL configurations.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
   *
   * @return The cloudSql.
   */
  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.CloudSqlInstance getCloudSql() {
    if (configurationCase_ == 2) {
      return (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_;
    }
    return com.google.events.firebase.dataconnect.v1.CloudSqlInstance.getDefaultInstance();
  }

  /**
   *
   *
   * <pre>
   * Cloud SQL configurations.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
   */
  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.CloudSqlInstanceOrBuilder
      getCloudSqlOrBuilder() {
    if (configurationCase_ == 2) {
      return (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_;
    }
    return com.google.events.firebase.dataconnect.v1.CloudSqlInstance.getDefaultInstance();
  }

  public static final int DATABASE_FIELD_NUMBER = 1;

  @SuppressWarnings("serial")
  private volatile java.lang.Object database_ = "";

  /**
   *
   *
   * <pre>
   * Required. Name of the PostgreSQL database.
   * </pre>
   *
   * <code>string database = 1;</code>
   *
   * @return The database.
   */
  @java.lang.Override
  public java.lang.String getDatabase() {
    java.lang.Object ref = database_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      database_ = s;
      return s;
    }
  }

  /**
   *
   *
   * <pre>
   * Required. Name of the PostgreSQL database.
   * </pre>
   *
   * <code>string database = 1;</code>
   *
   * @return The bytes for database.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getDatabaseBytes() {
    java.lang.Object ref = database_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      database_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(database_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, database_);
    }
    if (configurationCase_ == 2) {
      output.writeMessage(
          2, (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_);
    }
    if (beforeDeployCase_ == 3) {
      output.writeEnum(3, ((java.lang.Integer) beforeDeploy_));
    }
    if (configurationCase_ == 4) {
      output.writeBool(4, (boolean) ((java.lang.Boolean) configuration_));
    }
    if (beforeDeployCase_ == 5) {
      output.writeEnum(5, ((java.lang.Integer) beforeDeploy_));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(database_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, database_);
    }
    if (configurationCase_ == 2) {
      size +=
          com.google.protobuf.CodedOutputStream.computeMessageSize(
              2, (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_);
    }
    if (beforeDeployCase_ == 3) {
      size +=
          com.google.protobuf.CodedOutputStream.computeEnumSize(
              3, ((java.lang.Integer) beforeDeploy_));
    }
    if (configurationCase_ == 4) {
      size +=
          com.google.protobuf.CodedOutputStream.computeBoolSize(
              4, (boolean) ((java.lang.Boolean) configuration_));
    }
    if (beforeDeployCase_ == 5) {
      size +=
          com.google.protobuf.CodedOutputStream.computeEnumSize(
              5, ((java.lang.Integer) beforeDeploy_));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.events.firebase.dataconnect.v1.PostgreSql)) {
      return super.equals(obj);
    }
    com.google.events.firebase.dataconnect.v1.PostgreSql other =
        (com.google.events.firebase.dataconnect.v1.PostgreSql) obj;

    if (!getDatabase().equals(other.getDatabase())) return false;
    if (!getBeforeDeployCase().equals(other.getBeforeDeployCase())) return false;
    switch (beforeDeployCase_) {
      case 3:
        if (getSchemaValidationValue() != other.getSchemaValidationValue()) return false;
        break;
      case 5:
        if (getSchemaMigrationValue() != other.getSchemaMigrationValue()) return false;
        break;
      case 0:
      default:
    }
    if (!getConfigurationCase().equals(other.getConfigurationCase())) return false;
    switch (configurationCase_) {
      case 4:
        if (getUnlinked() != other.getUnlinked()) return false;
        break;
      case 2:
        if (!getCloudSql().equals(other.getCloudSql())) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DATABASE_FIELD_NUMBER;
    hash = (53 * hash) + getDatabase().hashCode();
    switch (beforeDeployCase_) {
      case 3:
        hash = (37 * hash) + SCHEMA_VALIDATION_FIELD_NUMBER;
        hash = (53 * hash) + getSchemaValidationValue();
        break;
      case 5:
        hash = (37 * hash) + SCHEMA_MIGRATION_FIELD_NUMBER;
        hash = (53 * hash) + getSchemaMigrationValue();
        break;
      case 0:
      default:
    }
    switch (configurationCase_) {
      case 4:
        hash = (37 * hash) + UNLINKED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getUnlinked());
        break;
      case 2:
        hash = (37 * hash) + CLOUD_SQL_FIELD_NUMBER;
        hash = (53 * hash) + getCloudSql().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.events.firebase.dataconnect.v1.PostgreSql prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }

  /**
   *
   *
   * <pre>
   * Settings for PostgreSQL data source.
   * </pre>
   *
   * Protobuf type {@code google.events.firebase.dataconnect.v1.PostgreSql}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.events.firebase.dataconnect.v1.PostgreSql)
      com.google.events.firebase.dataconnect.v1.PostgreSqlOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.events.firebase.dataconnect.v1.Data
          .internal_static_google_events_firebase_dataconnect_v1_PostgreSql_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.events.firebase.dataconnect.v1.Data
          .internal_static_google_events_firebase_dataconnect_v1_PostgreSql_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.events.firebase.dataconnect.v1.PostgreSql.class,
              com.google.events.firebase.dataconnect.v1.PostgreSql.Builder.class);
    }

    // Construct using com.google.events.firebase.dataconnect.v1.PostgreSql.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (cloudSqlBuilder_ != null) {
        cloudSqlBuilder_.clear();
      }
      database_ = "";
      beforeDeployCase_ = 0;
      beforeDeploy_ = null;
      configurationCase_ = 0;
      configuration_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.events.firebase.dataconnect.v1.Data
          .internal_static_google_events_firebase_dataconnect_v1_PostgreSql_descriptor;
    }

    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.PostgreSql getDefaultInstanceForType() {
      return com.google.events.firebase.dataconnect.v1.PostgreSql.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.PostgreSql build() {
      com.google.events.firebase.dataconnect.v1.PostgreSql result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.PostgreSql buildPartial() {
      com.google.events.firebase.dataconnect.v1.PostgreSql result =
          new com.google.events.firebase.dataconnect.v1.PostgreSql(this);
      if (bitField0_ != 0) {
        buildPartial0(result);
      }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(com.google.events.firebase.dataconnect.v1.PostgreSql result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.database_ = database_;
      }
    }

    private void buildPartialOneofs(com.google.events.firebase.dataconnect.v1.PostgreSql result) {
      result.beforeDeployCase_ = beforeDeployCase_;
      result.beforeDeploy_ = this.beforeDeploy_;
      result.configurationCase_ = configurationCase_;
      result.configuration_ = this.configuration_;
      if (configurationCase_ == 2 && cloudSqlBuilder_ != null) {
        result.configuration_ = cloudSqlBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.events.firebase.dataconnect.v1.PostgreSql) {
        return mergeFrom((com.google.events.firebase.dataconnect.v1.PostgreSql) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.events.firebase.dataconnect.v1.PostgreSql other) {
      if (other == com.google.events.firebase.dataconnect.v1.PostgreSql.getDefaultInstance())
        return this;
      if (!other.getDatabase().isEmpty()) {
        database_ = other.database_;
        bitField0_ |= 0x00000010;
        onChanged();
      }
      switch (other.getBeforeDeployCase()) {
        case SCHEMA_VALIDATION:
          {
            setSchemaValidationValue(other.getSchemaValidationValue());
            break;
          }
        case SCHEMA_MIGRATION:
          {
            setSchemaMigrationValue(other.getSchemaMigrationValue());
            break;
          }
        case BEFOREDEPLOY_NOT_SET:
          {
            break;
          }
      }
      switch (other.getConfigurationCase()) {
        case UNLINKED:
          {
            setUnlinked(other.getUnlinked());
            break;
          }
        case CLOUD_SQL:
          {
            mergeCloudSql(other.getCloudSql());
            break;
          }
        case CONFIGURATION_NOT_SET:
          {
            break;
          }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10:
              {
                database_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 10
            case 18:
              {
                input.readMessage(getCloudSqlFieldBuilder().getBuilder(), extensionRegistry);
                configurationCase_ = 2;
                break;
              } // case 18
            case 24:
              {
                int rawValue = input.readEnum();
                beforeDeployCase_ = 3;
                beforeDeploy_ = rawValue;
                break;
              } // case 24
            case 32:
              {
                configuration_ = input.readBool();
                configurationCase_ = 4;
                break;
              } // case 32
            case 40:
              {
                int rawValue = input.readEnum();
                beforeDeployCase_ = 5;
                beforeDeploy_ = rawValue;
                break;
              } // case 40
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int beforeDeployCase_ = 0;
    private java.lang.Object beforeDeploy_;

    public BeforeDeployCase getBeforeDeployCase() {
      return BeforeDeployCase.forNumber(beforeDeployCase_);
    }

    public Builder clearBeforeDeploy() {
      beforeDeployCase_ = 0;
      beforeDeploy_ = null;
      onChanged();
      return this;
    }

    private int configurationCase_ = 0;
    private java.lang.Object configuration_;

    public ConfigurationCase getConfigurationCase() {
      return ConfigurationCase.forNumber(configurationCase_);
    }

    public Builder clearConfiguration() {
      configurationCase_ = 0;
      configuration_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     *
     *
     * <pre>
     * Optional. Configure how much Postgresql schema validation to perform.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;
     * </code>
     *
     * @return Whether the schemaValidation field is set.
     */
    @java.lang.Override
    public boolean hasSchemaValidation() {
      return beforeDeployCase_ == 3;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how much Postgresql schema validation to perform.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;
     * </code>
     *
     * @return The enum numeric value on the wire for schemaValidation.
     */
    @java.lang.Override
    public int getSchemaValidationValue() {
      if (beforeDeployCase_ == 3) {
        return ((java.lang.Integer) beforeDeploy_).intValue();
      }
      return 0;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how much Postgresql schema validation to perform.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;
     * </code>
     *
     * @param value The enum numeric value on the wire for schemaValidation to set.
     * @return This builder for chaining.
     */
    public Builder setSchemaValidationValue(int value) {
      beforeDeployCase_ = 3;
      beforeDeploy_ = value;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how much Postgresql schema validation to perform.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;
     * </code>
     *
     * @return The schemaValidation.
     */
    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.SqlSchemaValidation getSchemaValidation() {
      if (beforeDeployCase_ == 3) {
        com.google.events.firebase.dataconnect.v1.SqlSchemaValidation result =
            com.google.events.firebase.dataconnect.v1.SqlSchemaValidation.forNumber(
                (java.lang.Integer) beforeDeploy_);
        return result == null
            ? com.google.events.firebase.dataconnect.v1.SqlSchemaValidation.UNRECOGNIZED
            : result;
      }
      return com.google.events.firebase.dataconnect.v1.SqlSchemaValidation
          .SQL_SCHEMA_VALIDATION_UNSPECIFIED;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how much Postgresql schema validation to perform.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;
     * </code>
     *
     * @param value The schemaValidation to set.
     * @return This builder for chaining.
     */
    public Builder setSchemaValidation(
        com.google.events.firebase.dataconnect.v1.SqlSchemaValidation value) {
      if (value == null) {
        throw new NullPointerException();
      }
      beforeDeployCase_ = 3;
      beforeDeploy_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how much Postgresql schema validation to perform.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaValidation schema_validation = 3;
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSchemaValidation() {
      if (beforeDeployCase_ == 3) {
        beforeDeployCase_ = 0;
        beforeDeploy_ = null;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how to perform Postgresql schema migration.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
     *
     * @return Whether the schemaMigration field is set.
     */
    @java.lang.Override
    public boolean hasSchemaMigration() {
      return beforeDeployCase_ == 5;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how to perform Postgresql schema migration.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
     *
     * @return The enum numeric value on the wire for schemaMigration.
     */
    @java.lang.Override
    public int getSchemaMigrationValue() {
      if (beforeDeployCase_ == 5) {
        return ((java.lang.Integer) beforeDeploy_).intValue();
      }
      return 0;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how to perform Postgresql schema migration.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
     *
     * @param value The enum numeric value on the wire for schemaMigration to set.
     * @return This builder for chaining.
     */
    public Builder setSchemaMigrationValue(int value) {
      beforeDeployCase_ = 5;
      beforeDeploy_ = value;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how to perform Postgresql schema migration.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
     *
     * @return The schemaMigration.
     */
    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.SqlSchemaMigration getSchemaMigration() {
      if (beforeDeployCase_ == 5) {
        com.google.events.firebase.dataconnect.v1.SqlSchemaMigration result =
            com.google.events.firebase.dataconnect.v1.SqlSchemaMigration.forNumber(
                (java.lang.Integer) beforeDeploy_);
        return result == null
            ? com.google.events.firebase.dataconnect.v1.SqlSchemaMigration.UNRECOGNIZED
            : result;
      }
      return com.google.events.firebase.dataconnect.v1.SqlSchemaMigration
          .SQL_SCHEMA_MIGRATION_UNSPECIFIED;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how to perform Postgresql schema migration.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
     *
     * @param value The schemaMigration to set.
     * @return This builder for chaining.
     */
    public Builder setSchemaMigration(
        com.google.events.firebase.dataconnect.v1.SqlSchemaMigration value) {
      if (value == null) {
        throw new NullPointerException();
      }
      beforeDeployCase_ = 5;
      beforeDeploy_ = value.getNumber();
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Optional. Configure how to perform Postgresql schema migration.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.SqlSchemaMigration schema_migration = 5;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearSchemaMigration() {
      if (beforeDeployCase_ == 5) {
        beforeDeployCase_ = 0;
        beforeDeploy_ = null;
        onChanged();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * No Postgres data source is linked.
     * If set, don't allow `database` and `schema_validation` to be configured.
     * </pre>
     *
     * <code>bool unlinked = 4;</code>
     *
     * @return Whether the unlinked field is set.
     */
    public boolean hasUnlinked() {
      return configurationCase_ == 4;
    }

    /**
     *
     *
     * <pre>
     * No Postgres data source is linked.
     * If set, don't allow `database` and `schema_validation` to be configured.
     * </pre>
     *
     * <code>bool unlinked = 4;</code>
     *
     * @return The unlinked.
     */
    public boolean getUnlinked() {
      if (configurationCase_ == 4) {
        return (java.lang.Boolean) configuration_;
      }
      return false;
    }

    /**
     *
     *
     * <pre>
     * No Postgres data source is linked.
     * If set, don't allow `database` and `schema_validation` to be configured.
     * </pre>
     *
     * <code>bool unlinked = 4;</code>
     *
     * @param value The unlinked to set.
     * @return This builder for chaining.
     */
    public Builder setUnlinked(boolean value) {

      configurationCase_ = 4;
      configuration_ = value;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * No Postgres data source is linked.
     * If set, don't allow `database` and `schema_validation` to be configured.
     * </pre>
     *
     * <code>bool unlinked = 4;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearUnlinked() {
      if (configurationCase_ == 4) {
        configurationCase_ = 0;
        configuration_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.events.firebase.dataconnect.v1.CloudSqlInstance,
            com.google.events.firebase.dataconnect.v1.CloudSqlInstance.Builder,
            com.google.events.firebase.dataconnect.v1.CloudSqlInstanceOrBuilder>
        cloudSqlBuilder_;

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     *
     * @return Whether the cloudSql field is set.
     */
    @java.lang.Override
    public boolean hasCloudSql() {
      return configurationCase_ == 2;
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     *
     * @return The cloudSql.
     */
    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.CloudSqlInstance getCloudSql() {
      if (cloudSqlBuilder_ == null) {
        if (configurationCase_ == 2) {
          return (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_;
        }
        return com.google.events.firebase.dataconnect.v1.CloudSqlInstance.getDefaultInstance();
      } else {
        if (configurationCase_ == 2) {
          return cloudSqlBuilder_.getMessage();
        }
        return com.google.events.firebase.dataconnect.v1.CloudSqlInstance.getDefaultInstance();
      }
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    public Builder setCloudSql(com.google.events.firebase.dataconnect.v1.CloudSqlInstance value) {
      if (cloudSqlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        configuration_ = value;
        onChanged();
      } else {
        cloudSqlBuilder_.setMessage(value);
      }
      configurationCase_ = 2;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    public Builder setCloudSql(
        com.google.events.firebase.dataconnect.v1.CloudSqlInstance.Builder builderForValue) {
      if (cloudSqlBuilder_ == null) {
        configuration_ = builderForValue.build();
        onChanged();
      } else {
        cloudSqlBuilder_.setMessage(builderForValue.build());
      }
      configurationCase_ = 2;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    public Builder mergeCloudSql(com.google.events.firebase.dataconnect.v1.CloudSqlInstance value) {
      if (cloudSqlBuilder_ == null) {
        if (configurationCase_ == 2
            && configuration_
                != com.google.events.firebase.dataconnect.v1.CloudSqlInstance
                    .getDefaultInstance()) {
          configuration_ =
              com.google.events.firebase.dataconnect.v1.CloudSqlInstance.newBuilder(
                      (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          configuration_ = value;
        }
        onChanged();
      } else {
        if (configurationCase_ == 2) {
          cloudSqlBuilder_.mergeFrom(value);
        } else {
          cloudSqlBuilder_.setMessage(value);
        }
      }
      configurationCase_ = 2;
      return this;
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    public Builder clearCloudSql() {
      if (cloudSqlBuilder_ == null) {
        if (configurationCase_ == 2) {
          configurationCase_ = 0;
          configuration_ = null;
          onChanged();
        }
      } else {
        if (configurationCase_ == 2) {
          configurationCase_ = 0;
          configuration_ = null;
        }
        cloudSqlBuilder_.clear();
      }
      return this;
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    public com.google.events.firebase.dataconnect.v1.CloudSqlInstance.Builder getCloudSqlBuilder() {
      return getCloudSqlFieldBuilder().getBuilder();
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    @java.lang.Override
    public com.google.events.firebase.dataconnect.v1.CloudSqlInstanceOrBuilder
        getCloudSqlOrBuilder() {
      if ((configurationCase_ == 2) && (cloudSqlBuilder_ != null)) {
        return cloudSqlBuilder_.getMessageOrBuilder();
      } else {
        if (configurationCase_ == 2) {
          return (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_;
        }
        return com.google.events.firebase.dataconnect.v1.CloudSqlInstance.getDefaultInstance();
      }
    }

    /**
     *
     *
     * <pre>
     * Cloud SQL configurations.
     * </pre>
     *
     * <code>.google.events.firebase.dataconnect.v1.CloudSqlInstance cloud_sql = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.events.firebase.dataconnect.v1.CloudSqlInstance,
            com.google.events.firebase.dataconnect.v1.CloudSqlInstance.Builder,
            com.google.events.firebase.dataconnect.v1.CloudSqlInstanceOrBuilder>
        getCloudSqlFieldBuilder() {
      if (cloudSqlBuilder_ == null) {
        if (!(configurationCase_ == 2)) {
          configuration_ =
              com.google.events.firebase.dataconnect.v1.CloudSqlInstance.getDefaultInstance();
        }
        cloudSqlBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.events.firebase.dataconnect.v1.CloudSqlInstance,
                com.google.events.firebase.dataconnect.v1.CloudSqlInstance.Builder,
                com.google.events.firebase.dataconnect.v1.CloudSqlInstanceOrBuilder>(
                (com.google.events.firebase.dataconnect.v1.CloudSqlInstance) configuration_,
                getParentForChildren(),
                isClean());
        configuration_ = null;
      }
      configurationCase_ = 2;
      onChanged();
      return cloudSqlBuilder_;
    }

    private java.lang.Object database_ = "";

    /**
     *
     *
     * <pre>
     * Required. Name of the PostgreSQL database.
     * </pre>
     *
     * <code>string database = 1;</code>
     *
     * @return The database.
     */
    public java.lang.String getDatabase() {
      java.lang.Object ref = database_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        database_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. Name of the PostgreSQL database.
     * </pre>
     *
     * <code>string database = 1;</code>
     *
     * @return The bytes for database.
     */
    public com.google.protobuf.ByteString getDatabaseBytes() {
      java.lang.Object ref = database_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        database_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    /**
     *
     *
     * <pre>
     * Required. Name of the PostgreSQL database.
     * </pre>
     *
     * <code>string database = 1;</code>
     *
     * @param value The database to set.
     * @return This builder for chaining.
     */
    public Builder setDatabase(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }
      database_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. Name of the PostgreSQL database.
     * </pre>
     *
     * <code>string database = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDatabase() {
      database_ = getDefaultInstance().getDatabase();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }

    /**
     *
     *
     * <pre>
     * Required. Name of the PostgreSQL database.
     * </pre>
     *
     * <code>string database = 1;</code>
     *
     * @param value The bytes for database to set.
     * @return This builder for chaining.
     */
    public Builder setDatabaseBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);
      database_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.events.firebase.dataconnect.v1.PostgreSql)
  }

  // @@protoc_insertion_point(class_scope:google.events.firebase.dataconnect.v1.PostgreSql)
  private static final com.google.events.firebase.dataconnect.v1.PostgreSql DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.events.firebase.dataconnect.v1.PostgreSql();
  }

  public static com.google.events.firebase.dataconnect.v1.PostgreSql getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PostgreSql> PARSER =
      new com.google.protobuf.AbstractParser<PostgreSql>() {
        @java.lang.Override
        public PostgreSql parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<PostgreSql> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PostgreSql> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.events.firebase.dataconnect.v1.PostgreSql getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
