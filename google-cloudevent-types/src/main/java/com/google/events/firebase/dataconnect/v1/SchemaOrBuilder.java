/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/dataconnect/v1/data.proto

package com.google.events.firebase.dataconnect.v1;

public interface SchemaOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.events.firebase.dataconnect.v1.Schema)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Identifier. The relative resource name of the schema, in the format:
   * ```
   * projects/{project}/locations/{location}/services/{service}/schemas/{schema}
   * ```
   * Right now, the only supported schema is "main".
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  java.lang.String getName();

  /**
   *
   *
   * <pre>
   * Identifier. The relative resource name of the schema, in the format:
   * ```
   * projects/{project}/locations/{location}/services/{service}/schemas/{schema}
   * ```
   * Right now, the only supported schema is "main".
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * Output only. [Output only] Create time stamp.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 2;</code>
   *
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();

  /**
   *
   *
   * <pre>
   * Output only. [Output only] Create time stamp.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 2;</code>
   *
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();

  /**
   *
   *
   * <pre>
   * Output only. [Output only] Create time stamp.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. [Output only] Update time stamp.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 3;</code>
   *
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();

  /**
   *
   *
   * <pre>
   * Output only. [Output only] Update time stamp.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 3;</code>
   *
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();

  /**
   *
   *
   * <pre>
   * Output only. [Output only] Update time stamp.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 3;</code>
   */
  com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Optional. Labels as key value pairs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  int getLabelsCount();

  /**
   *
   *
   * <pre>
   * Optional. Labels as key value pairs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  boolean containsLabels(java.lang.String key);

  /** Use {@link #getLabelsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getLabels();

  /**
   *
   *
   * <pre>
   * Optional. Labels as key value pairs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.String> getLabelsMap();

  /**
   *
   *
   * <pre>
   * Optional. Labels as key value pairs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  /* nullable */
  java.lang.String getLabelsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);

  /**
   *
   *
   * <pre>
   * Optional. Labels as key value pairs.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  java.lang.String getLabelsOrThrow(java.lang.String key);

  /**
   *
   *
   * <pre>
   * Optional. Stores small amounts of arbitrary data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5;</code>
   */
  int getAnnotationsCount();

  /**
   *
   *
   * <pre>
   * Optional. Stores small amounts of arbitrary data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5;</code>
   */
  boolean containsAnnotations(java.lang.String key);

  /** Use {@link #getAnnotationsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getAnnotations();

  /**
   *
   *
   * <pre>
   * Optional. Stores small amounts of arbitrary data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5;</code>
   */
  java.util.Map<java.lang.String, java.lang.String> getAnnotationsMap();

  /**
   *
   *
   * <pre>
   * Optional. Stores small amounts of arbitrary data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5;</code>
   */
  /* nullable */
  java.lang.String getAnnotationsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);

  /**
   *
   *
   * <pre>
   * Optional. Stores small amounts of arbitrary data.
   * </pre>
   *
   * <code>map&lt;string, string&gt; annotations = 5;</code>
   */
  java.lang.String getAnnotationsOrThrow(java.lang.String key);

  /**
   *
   *
   * <pre>
   * Required. The data sources linked in the schema.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.Datasource datasources = 11;</code>
   */
  java.util.List<com.google.events.firebase.dataconnect.v1.Datasource> getDatasourcesList();

  /**
   *
   *
   * <pre>
   * Required. The data sources linked in the schema.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.Datasource datasources = 11;</code>
   */
  com.google.events.firebase.dataconnect.v1.Datasource getDatasources(int index);

  /**
   *
   *
   * <pre>
   * Required. The data sources linked in the schema.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.Datasource datasources = 11;</code>
   */
  int getDatasourcesCount();

  /**
   *
   *
   * <pre>
   * Required. The data sources linked in the schema.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.Datasource datasources = 11;</code>
   */
  java.util.List<? extends com.google.events.firebase.dataconnect.v1.DatasourceOrBuilder>
      getDatasourcesOrBuilderList();

  /**
   *
   *
   * <pre>
   * Required. The data sources linked in the schema.
   * </pre>
   *
   * <code>repeated .google.events.firebase.dataconnect.v1.Datasource datasources = 11;</code>
   */
  com.google.events.firebase.dataconnect.v1.DatasourceOrBuilder getDatasourcesOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Required. The source files that comprise the application schema.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.Source source = 7;</code>
   *
   * @return Whether the source field is set.
   */
  boolean hasSource();

  /**
   *
   *
   * <pre>
   * Required. The source files that comprise the application schema.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.Source source = 7;</code>
   *
   * @return The source.
   */
  com.google.events.firebase.dataconnect.v1.Source getSource();

  /**
   *
   *
   * <pre>
   * Required. The source files that comprise the application schema.
   * </pre>
   *
   * <code>.google.events.firebase.dataconnect.v1.Source source = 7;</code>
   */
  com.google.events.firebase.dataconnect.v1.SourceOrBuilder getSourceOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. System-assigned, unique identifier.
   * </pre>
   *
   * <code>string uid = 8;</code>
   *
   * @return The uid.
   */
  java.lang.String getUid();

  /**
   *
   *
   * <pre>
   * Output only. System-assigned, unique identifier.
   * </pre>
   *
   * <code>string uid = 8;</code>
   *
   * @return The bytes for uid.
   */
  com.google.protobuf.ByteString getUidBytes();

  /**
   *
   *
   * <pre>
   * Output only. A field that if true, indicates that the system is working to
   * compile and deploy the schema.
   * </pre>
   *
   * <code>bool reconciling = 9;</code>
   *
   * @return The reconciling.
   */
  boolean getReconciling();

  /**
   *
   *
   * <pre>
   * Optional. Mutable human-readable name. 63 character limit.
   * </pre>
   *
   * <code>string display_name = 10;</code>
   *
   * @return The displayName.
   */
  java.lang.String getDisplayName();

  /**
   *
   *
   * <pre>
   * Optional. Mutable human-readable name. 63 character limit.
   * </pre>
   *
   * <code>string display_name = 10;</code>
   *
   * @return The bytes for displayName.
   */
  com.google.protobuf.ByteString getDisplayNameBytes();

  /**
   *
   *
   * <pre>
   * Output only. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   * [AIP-154](https://google.aip.dev/154)
   * </pre>
   *
   * <code>string etag = 99;</code>
   *
   * @return The etag.
   */
  java.lang.String getEtag();

  /**
   *
   *
   * <pre>
   * Output only. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   * [AIP-154](https://google.aip.dev/154)
   * </pre>
   *
   * <code>string etag = 99;</code>
   *
   * @return The bytes for etag.
   */
  com.google.protobuf.ByteString getEtagBytes();
}
