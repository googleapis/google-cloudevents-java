/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/firebase/dataconnect/v1/data.proto

package com.google.events.firebase.dataconnect.v1;

/**
 *
 *
 * <pre>
 * Configure how much SQL Schema to perform for the given schema.
 * </pre>
 *
 * Protobuf enum {@code google.events.firebase.dataconnect.v1.SqlSchemaValidation}
 */
public enum SqlSchemaValidation implements com.google.protobuf.ProtocolMessageEnum {
  /**
   *
   *
   * <pre>
   * Unspecified SQL schema validation.
   * Default to STRICT.
   * </pre>
   *
   * <code>SQL_SCHEMA_VALIDATION_UNSPECIFIED = 0;</code>
   */
  SQL_SCHEMA_VALIDATION_UNSPECIFIED(0),
  /**
   *
   *
   * <pre>
   * Skip no SQL schema validation. Use it with extreme caution.
   * CreateSchema or UpdateSchema will succeed even if SQL database is
   * unavailable or SQL schema is incompatible.
   * Generated SQL may fail at execution time.
   * </pre>
   *
   * <code>NONE = 1;</code>
   */
  NONE(1),
  /**
   *
   *
   * <pre>
   * Connect to the SQL database and validate that the SQL DDL matches the
   * schema exactly. Surface any discrepancies as `FAILED_PRECONDITION` with an
   * `IncompatibleSqlSchemaError` error detail.
   * </pre>
   *
   * <code>STRICT = 2;</code>
   */
  STRICT(2),
  /**
   *
   *
   * <pre>
   * Connect to the SQL database and validate that the SQL DDL has all the SQL
   * resources used in the given Firebase Data Connect Schema. Surface any
   * missing resources as `FAILED_PRECONDITION` with an
   * `IncompatibleSqlSchemaError` error detail. Succeed even if there are
   * unknown tables and columns.
   * </pre>
   *
   * <code>COMPATIBLE = 3;</code>
   */
  COMPATIBLE(3),
  UNRECOGNIZED(-1),
  ;

  /**
   *
   *
   * <pre>
   * Unspecified SQL schema validation.
   * Default to STRICT.
   * </pre>
   *
   * <code>SQL_SCHEMA_VALIDATION_UNSPECIFIED = 0;</code>
   */
  public static final int SQL_SCHEMA_VALIDATION_UNSPECIFIED_VALUE = 0;

  /**
   *
   *
   * <pre>
   * Skip no SQL schema validation. Use it with extreme caution.
   * CreateSchema or UpdateSchema will succeed even if SQL database is
   * unavailable or SQL schema is incompatible.
   * Generated SQL may fail at execution time.
   * </pre>
   *
   * <code>NONE = 1;</code>
   */
  public static final int NONE_VALUE = 1;

  /**
   *
   *
   * <pre>
   * Connect to the SQL database and validate that the SQL DDL matches the
   * schema exactly. Surface any discrepancies as `FAILED_PRECONDITION` with an
   * `IncompatibleSqlSchemaError` error detail.
   * </pre>
   *
   * <code>STRICT = 2;</code>
   */
  public static final int STRICT_VALUE = 2;

  /**
   *
   *
   * <pre>
   * Connect to the SQL database and validate that the SQL DDL has all the SQL
   * resources used in the given Firebase Data Connect Schema. Surface any
   * missing resources as `FAILED_PRECONDITION` with an
   * `IncompatibleSqlSchemaError` error detail. Succeed even if there are
   * unknown tables and columns.
   * </pre>
   *
   * <code>COMPATIBLE = 3;</code>
   */
  public static final int COMPATIBLE_VALUE = 3;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SqlSchemaValidation valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SqlSchemaValidation forNumber(int value) {
    switch (value) {
      case 0:
        return SQL_SCHEMA_VALIDATION_UNSPECIFIED;
      case 1:
        return NONE;
      case 2:
        return STRICT;
      case 3:
        return COMPATIBLE;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SqlSchemaValidation>
      internalGetValueMap() {
    return internalValueMap;
  }

  private static final com.google.protobuf.Internal.EnumLiteMap<SqlSchemaValidation>
      internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SqlSchemaValidation>() {
            public SqlSchemaValidation findValueByNumber(int number) {
              return SqlSchemaValidation.forNumber(number);
            }
          };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }

  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }

  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return com.google.events.firebase.dataconnect.v1.Data.getDescriptor().getEnumTypes().get(0);
  }

  private static final SqlSchemaValidation[] VALUES = values();

  public static SqlSchemaValidation valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SqlSchemaValidation(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.events.firebase.dataconnect.v1.SqlSchemaValidation)
}
