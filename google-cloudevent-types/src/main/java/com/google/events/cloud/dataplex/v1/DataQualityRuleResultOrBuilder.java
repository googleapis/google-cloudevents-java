/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/dataplex/v1/data.proto

package com.google.events.cloud.dataplex.v1;

public interface DataQualityRuleResultOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.events.cloud.dataplex.v1.DataQualityRuleResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The rule specified in the DataQualitySpec, as is.
   * </pre>
   *
   * <code>.google.events.cloud.dataplex.v1.DataQualityRule rule = 1;</code>
   *
   * @return Whether the rule field is set.
   */
  boolean hasRule();
  /**
   *
   *
   * <pre>
   * The rule specified in the DataQualitySpec, as is.
   * </pre>
   *
   * <code>.google.events.cloud.dataplex.v1.DataQualityRule rule = 1;</code>
   *
   * @return The rule.
   */
  com.google.events.cloud.dataplex.v1.DataQualityRule getRule();
  /**
   *
   *
   * <pre>
   * The rule specified in the DataQualitySpec, as is.
   * </pre>
   *
   * <code>.google.events.cloud.dataplex.v1.DataQualityRule rule = 1;</code>
   */
  com.google.events.cloud.dataplex.v1.DataQualityRuleOrBuilder getRuleOrBuilder();

  /**
   *
   *
   * <pre>
   * Whether the rule passed or failed.
   * </pre>
   *
   * <code>bool passed = 7;</code>
   *
   * @return The passed.
   */
  boolean getPassed();

  /**
   *
   *
   * <pre>
   * The number of rows a rule was evaluated against. This field is only valid
   * for ColumnMap type rules.
   * Evaluated count can be configured to either
   * * include all rows (default) - with `null` rows automatically failing rule
   * evaluation, or
   * * exclude `null` rows from the `evaluated_count`, by setting
   * `ignore_nulls = true`.
   * </pre>
   *
   * <code>int64 evaluated_count = 9;</code>
   *
   * @return The evaluatedCount.
   */
  long getEvaluatedCount();

  /**
   *
   *
   * <pre>
   * The number of rows which passed a rule evaluation.
   * This field is only valid for ColumnMap type rules.
   * </pre>
   *
   * <code>int64 passed_count = 8;</code>
   *
   * @return The passedCount.
   */
  long getPassedCount();

  /**
   *
   *
   * <pre>
   * The number of rows with null values in the specified column.
   * </pre>
   *
   * <code>int64 null_count = 5;</code>
   *
   * @return The nullCount.
   */
  long getNullCount();

  /**
   *
   *
   * <pre>
   * The ratio of **passed_count / evaluated_count**.
   * This field is only valid for ColumnMap type rules.
   * </pre>
   *
   * <code>double pass_ratio = 6;</code>
   *
   * @return The passRatio.
   */
  double getPassRatio();

  /**
   *
   *
   * <pre>
   * The query to find rows that did not pass this rule.
   * Only applies to ColumnMap and RowCondition rules.
   * </pre>
   *
   * <code>string failing_rows_query = 10;</code>
   *
   * @return The failingRowsQuery.
   */
  java.lang.String getFailingRowsQuery();
  /**
   *
   *
   * <pre>
   * The query to find rows that did not pass this rule.
   * Only applies to ColumnMap and RowCondition rules.
   * </pre>
   *
   * <code>string failing_rows_query = 10;</code>
   *
   * @return The bytes for failingRowsQuery.
   */
  com.google.protobuf.ByteString getFailingRowsQueryBytes();
}
