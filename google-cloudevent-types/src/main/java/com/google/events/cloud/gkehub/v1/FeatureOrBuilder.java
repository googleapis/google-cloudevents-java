/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/events/cloud/gkehub/v1/data.proto

package com.google.events.cloud.gkehub.v1;

public interface FeatureOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.events.cloud.gkehub.v1.Feature)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * Output only. The full, unique name of this Feature resource in the format
   * `projects/&#42;&#47;locations/&#42;&#47;features/&#42;`.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  java.lang.String getName();
  /**
   *
   *
   * <pre>
   * Output only. The full, unique name of this Feature resource in the format
   * `projects/&#42;&#47;locations/&#42;&#47;features/&#42;`.
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString getNameBytes();

  /**
   *
   *
   * <pre>
   * GCP labels for this Feature.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 2;</code>
   */
  int getLabelsCount();
  /**
   *
   *
   * <pre>
   * GCP labels for this Feature.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 2;</code>
   */
  boolean containsLabels(java.lang.String key);
  /** Use {@link #getLabelsMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String> getLabels();
  /**
   *
   *
   * <pre>
   * GCP labels for this Feature.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 2;</code>
   */
  java.util.Map<java.lang.String, java.lang.String> getLabelsMap();
  /**
   *
   *
   * <pre>
   * GCP labels for this Feature.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 2;</code>
   */
  /* nullable */
  java.lang.String getLabelsOrDefault(
      java.lang.String key,
      /* nullable */
      java.lang.String defaultValue);
  /**
   *
   *
   * <pre>
   * GCP labels for this Feature.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 2;</code>
   */
  java.lang.String getLabelsOrThrow(java.lang.String key);

  /**
   *
   *
   * <pre>
   * Output only. State of the Feature resource itself.
   * </pre>
   *
   * <code>.google.events.cloud.gkehub.v1.FeatureResourceState resource_state = 3;</code>
   *
   * @return Whether the resourceState field is set.
   */
  boolean hasResourceState();
  /**
   *
   *
   * <pre>
   * Output only. State of the Feature resource itself.
   * </pre>
   *
   * <code>.google.events.cloud.gkehub.v1.FeatureResourceState resource_state = 3;</code>
   *
   * @return The resourceState.
   */
  com.google.events.cloud.gkehub.v1.FeatureResourceState getResourceState();
  /**
   *
   *
   * <pre>
   * Output only. State of the Feature resource itself.
   * </pre>
   *
   * <code>.google.events.cloud.gkehub.v1.FeatureResourceState resource_state = 3;</code>
   */
  com.google.events.cloud.gkehub.v1.FeatureResourceStateOrBuilder getResourceStateOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. The Hub-wide Feature state.
   * </pre>
   *
   * <code>.google.events.cloud.gkehub.v1.CommonFeatureState state = 6;</code>
   *
   * @return Whether the state field is set.
   */
  boolean hasState();
  /**
   *
   *
   * <pre>
   * Output only. The Hub-wide Feature state.
   * </pre>
   *
   * <code>.google.events.cloud.gkehub.v1.CommonFeatureState state = 6;</code>
   *
   * @return The state.
   */
  com.google.events.cloud.gkehub.v1.CommonFeatureState getState();
  /**
   *
   *
   * <pre>
   * Output only. The Hub-wide Feature state.
   * </pre>
   *
   * <code>.google.events.cloud.gkehub.v1.CommonFeatureState state = 6;</code>
   */
  com.google.events.cloud.gkehub.v1.CommonFeatureStateOrBuilder getStateOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. Membership-specific Feature status. If this Feature does
   * report any per-Membership status, this field may be unused.
   * The keys indicate which Membership the state is for, in the form:
   * `projects/{p}/locations/{l}/memberships/{m}`
   * Where {p} is the project number, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} MUST match the Feature's
   * project number.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.events.cloud.gkehub.v1.MembershipFeatureState&gt; membership_states = 7;
   * </code>
   */
  int getMembershipStatesCount();
  /**
   *
   *
   * <pre>
   * Output only. Membership-specific Feature status. If this Feature does
   * report any per-Membership status, this field may be unused.
   * The keys indicate which Membership the state is for, in the form:
   * `projects/{p}/locations/{l}/memberships/{m}`
   * Where {p} is the project number, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} MUST match the Feature's
   * project number.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.events.cloud.gkehub.v1.MembershipFeatureState&gt; membership_states = 7;
   * </code>
   */
  boolean containsMembershipStates(java.lang.String key);
  /** Use {@link #getMembershipStatesMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.events.cloud.gkehub.v1.MembershipFeatureState>
      getMembershipStates();
  /**
   *
   *
   * <pre>
   * Output only. Membership-specific Feature status. If this Feature does
   * report any per-Membership status, this field may be unused.
   * The keys indicate which Membership the state is for, in the form:
   * `projects/{p}/locations/{l}/memberships/{m}`
   * Where {p} is the project number, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} MUST match the Feature's
   * project number.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.events.cloud.gkehub.v1.MembershipFeatureState&gt; membership_states = 7;
   * </code>
   */
  java.util.Map<java.lang.String, com.google.events.cloud.gkehub.v1.MembershipFeatureState>
      getMembershipStatesMap();
  /**
   *
   *
   * <pre>
   * Output only. Membership-specific Feature status. If this Feature does
   * report any per-Membership status, this field may be unused.
   * The keys indicate which Membership the state is for, in the form:
   * `projects/{p}/locations/{l}/memberships/{m}`
   * Where {p} is the project number, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} MUST match the Feature's
   * project number.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.events.cloud.gkehub.v1.MembershipFeatureState&gt; membership_states = 7;
   * </code>
   */
  /* nullable */
  com.google.events.cloud.gkehub.v1.MembershipFeatureState getMembershipStatesOrDefault(
      java.lang.String key,
      /* nullable */
      com.google.events.cloud.gkehub.v1.MembershipFeatureState defaultValue);
  /**
   *
   *
   * <pre>
   * Output only. Membership-specific Feature status. If this Feature does
   * report any per-Membership status, this field may be unused.
   * The keys indicate which Membership the state is for, in the form:
   * `projects/{p}/locations/{l}/memberships/{m}`
   * Where {p} is the project number, {l} is a valid location and {m} is a valid
   * Membership in this project at that location. {p} MUST match the Feature's
   * project number.
   * </pre>
   *
   * <code>
   * map&lt;string, .google.events.cloud.gkehub.v1.MembershipFeatureState&gt; membership_states = 7;
   * </code>
   */
  com.google.events.cloud.gkehub.v1.MembershipFeatureState getMembershipStatesOrThrow(
      java.lang.String key);

  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 8;</code>
   *
   * @return Whether the createTime field is set.
   */
  boolean hasCreateTime();
  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 8;</code>
   *
   * @return The createTime.
   */
  com.google.protobuf.Timestamp getCreateTime();
  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was created.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 8;</code>
   */
  com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 9;</code>
   *
   * @return Whether the updateTime field is set.
   */
  boolean hasUpdateTime();
  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 9;</code>
   *
   * @return The updateTime.
   */
  com.google.protobuf.Timestamp getUpdateTime();
  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was last updated.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 9;</code>
   */
  com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp delete_time = 10;</code>
   *
   * @return Whether the deleteTime field is set.
   */
  boolean hasDeleteTime();
  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp delete_time = 10;</code>
   *
   * @return The deleteTime.
   */
  com.google.protobuf.Timestamp getDeleteTime();
  /**
   *
   *
   * <pre>
   * Output only. When the Feature resource was deleted.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp delete_time = 10;</code>
   */
  com.google.protobuf.TimestampOrBuilder getDeleteTimeOrBuilder();

  /**
   *
   *
   * <pre>
   * Output only. Scope-specific Feature status. If this Feature does
   * report any per-Scope status, this field may be unused.
   * The keys indicate which Scope the state is for, in the form:
   * `projects/{p}/locations/global/scopes/{s}`
   * Where {p} is the project, {s} is a valid Scope in this project.
   * {p} WILL match the Feature's project.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.gkehub.v1.ScopeFeatureState&gt; scope_states = 13;
   * </code>
   */
  int getScopeStatesCount();
  /**
   *
   *
   * <pre>
   * Output only. Scope-specific Feature status. If this Feature does
   * report any per-Scope status, this field may be unused.
   * The keys indicate which Scope the state is for, in the form:
   * `projects/{p}/locations/global/scopes/{s}`
   * Where {p} is the project, {s} is a valid Scope in this project.
   * {p} WILL match the Feature's project.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.gkehub.v1.ScopeFeatureState&gt; scope_states = 13;
   * </code>
   */
  boolean containsScopeStates(java.lang.String key);
  /** Use {@link #getScopeStatesMap()} instead. */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.google.events.cloud.gkehub.v1.ScopeFeatureState>
      getScopeStates();
  /**
   *
   *
   * <pre>
   * Output only. Scope-specific Feature status. If this Feature does
   * report any per-Scope status, this field may be unused.
   * The keys indicate which Scope the state is for, in the form:
   * `projects/{p}/locations/global/scopes/{s}`
   * Where {p} is the project, {s} is a valid Scope in this project.
   * {p} WILL match the Feature's project.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.gkehub.v1.ScopeFeatureState&gt; scope_states = 13;
   * </code>
   */
  java.util.Map<java.lang.String, com.google.events.cloud.gkehub.v1.ScopeFeatureState>
      getScopeStatesMap();
  /**
   *
   *
   * <pre>
   * Output only. Scope-specific Feature status. If this Feature does
   * report any per-Scope status, this field may be unused.
   * The keys indicate which Scope the state is for, in the form:
   * `projects/{p}/locations/global/scopes/{s}`
   * Where {p} is the project, {s} is a valid Scope in this project.
   * {p} WILL match the Feature's project.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.gkehub.v1.ScopeFeatureState&gt; scope_states = 13;
   * </code>
   */
  /* nullable */
  com.google.events.cloud.gkehub.v1.ScopeFeatureState getScopeStatesOrDefault(
      java.lang.String key,
      /* nullable */
      com.google.events.cloud.gkehub.v1.ScopeFeatureState defaultValue);
  /**
   *
   *
   * <pre>
   * Output only. Scope-specific Feature status. If this Feature does
   * report any per-Scope status, this field may be unused.
   * The keys indicate which Scope the state is for, in the form:
   * `projects/{p}/locations/global/scopes/{s}`
   * Where {p} is the project, {s} is a valid Scope in this project.
   * {p} WILL match the Feature's project.
   * </pre>
   *
   * <code>map&lt;string, .google.events.cloud.gkehub.v1.ScopeFeatureState&gt; scope_states = 13;
   * </code>
   */
  com.google.events.cloud.gkehub.v1.ScopeFeatureState getScopeStatesOrThrow(java.lang.String key);
}
